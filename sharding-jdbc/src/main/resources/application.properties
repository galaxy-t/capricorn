#数据分片


#MyBatis Plus会默认有一个DataSource，需要重新使用自定义的Sharding的数据源去覆盖它
spring.main.allow-bean-definition-overriding=true

#数据源名称，多数据源以逗号分隔
spring.shardingsphere.datasource.names=ds,dss0,ds0,ds0s0,ds1,ds1s0

spring.shardingsphere.datasource.ds.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds.url=jdbc:mysql://localhost:3306/ds?characterEncoding=utf-8&amp;useInformationSchema=true
spring.shardingsphere.datasource.ds.username=root
spring.shardingsphere.datasource.ds.password=root

spring.shardingsphere.datasource.dss0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.dss0.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.dss0.url=jdbc:mysql://localhost:3306/dss?characterEncoding=utf-8&amp;useInformationSchema=true
spring.shardingsphere.datasource.dss0.username=root
spring.shardingsphere.datasource.dss0.password=root



#数据库连接池类名称
spring.shardingsphere.datasource.ds0.type=com.alibaba.druid.pool.DruidDataSource
#数据库驱动类名
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.jdbc.Driver
#数据库url连接
spring.shardingsphere.datasource.ds0.url=jdbc:mysql://localhost:3306/ds_0?characterEncoding=utf-8&amp;useInformationSchema=true
#数据库用户名
spring.shardingsphere.datasource.ds0.username=root
#数据库密码
spring.shardingsphere.datasource.ds0.password=root
#数据库连接池的其它属性
#spring.shardingsphere.datasource.<data-source-name>.xxx=



spring.shardingsphere.datasource.ds0s0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds0s0.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds0s0.url=jdbc:mysql://localhost:3306/ds_1?characterEncoding=utf-8&amp;useInformationSchema=true
spring.shardingsphere.datasource.ds0s0.username=root
spring.shardingsphere.datasource.ds0s0.password=root

spring.shardingsphere.datasource.ds1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds1.url=jdbc:mysql://localhost:3306/ds_2?characterEncoding=utf-8&amp;useInformationSchema=true
spring.shardingsphere.datasource.ds1.username=root
spring.shardingsphere.datasource.ds1.password=root

spring.shardingsphere.datasource.ds1s0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds1s0.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds1s0.url=jdbc:mysql://localhost:3306/ds_3?characterEncoding=utf-8&amp;useInformationSchema=true
spring.shardingsphere.datasource.ds1s0.username=root
spring.shardingsphere.datasource.ds1s0.password=root

#默认数据源配置
#用于不需要进行分片分表的数据
spring.shardingsphere.sharding.default-data-source-name=ms
#默认数据源主库
spring.shardingsphere.sharding.master-slave-rules.ms.master-data-source-name=ds
#默认数据源从库
spring.shardingsphere.sharding.master-slave-rules.ms.slave-data-source-names=dss0
#默认数据源从库负载均衡策略
spring.shardingsphere.sharding.master-slave-rules.ms.load-balance-algorithm-type=round_robin


#spring.shardingsphere.sharding.master-slave-rules.ms.master-data-source-name=ds
#spring.shardingsphere.sharding.master-slave-rules.ms.slave-data-source-names=dss0
#spring.shardingsphere.sharding.master-slave-rules.ms.load-balance-algorithm-type=round_robin


#设置主从
#第一个主从，name=ms0
#设置ms0的主数据源
spring.shardingsphere.sharding.master-slave-rules.ms0.master-data-source-name=ds0
#设置ms0的从数据源
spring.shardingsphere.sharding.master-slave-rules.ms0.slave-data-source-names=ds0s0
#设置ms0的从库负载均衡算法类型，可选值：ROUND_ROBIN，RANDOM。
spring.shardingsphere.sharding.master-slave-rules.ms0.load-balance-algorithm-type=round_robin

#第二个主从，name=ms1
#设置ms1的主数据源
spring.shardingsphere.sharding.master-slave-rules.ms1.master-data-source-name=ds1
#设置ms1的从数据源
spring.shardingsphere.sharding.master-slave-rules.ms1.slave-data-source-names=ds1s0
#设置ms1的从库负载均衡算法类型，可选值：ROUND_ROBIN，RANDOM。
spring.shardingsphere.sharding.master-slave-rules.ms1.load-balance-algorithm-type=round_robin




# 默认数据库分片策略
# 分片列名称
#spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=sex
# 设置分片策略
# 设置以sex区分不同的库
#spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=ms$->{sex}


####以下分库分表策略指定sex=0时使用ms0,sex=1时使用ms1,然后再以主键id模4进行分表

# t_user表分片
# 分片列名称
spring.shardingsphere.sharding.tables.t_user.database-strategy.inline.sharding-column=sex
# 设置分片策略
# 设置以sex区分不同的库
spring.shardingsphere.sharding.tables.t_user.database-strategy.inline.algorithm-expression=ms$->{sex}
# 由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持inline表达式。
# 缺省表示使用已知数据源与逻辑表名称生成数据节点。
# 用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况
# 设置一共有一共有两个库，每个库中有4张user表
spring.shardingsphere.sharding.tables.t_user.actual-data-nodes=ms$->{0..1}.t_user_$->{0..3}
# 设置分表策略使用id字段
spring.shardingsphere.sharding.tables.t_user.table-strategy.inline.sharding-column=id
# 设置分表策略
# 以逗号模4分布在四张表中
spring.shardingsphere.sharding.tables.t_user.table-strategy.inline.algorithm-expression=t_user_$->{id % 4}


#spring.shardingsphere.sharding.tables.t_order.actual-data-nodes=ms$->{0..1}.t_order$->{0..3}
#spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.sharding-column=user_id
#spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.algorithm-expression=t_order$->{order_id % 4}


#绑定表
#spring.shardingsphere.sharding.binding-tables=t_order,t_order_item
#spring.shardingsphere.sharding.broadcast-tables=t_config


#Sharding打印SQL
spring.shardingsphere.props.sql.show=true







