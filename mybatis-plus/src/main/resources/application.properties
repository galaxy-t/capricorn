#MyBatisPlus配置
#通用枚举所在路径
mybatis-plus.type-enums-package=com.galaxyt.capricorn.mybatisplus.enums


#多数据源配置
#master 默认数据源
spring.datasource.dynamic.datasource.master.username=root
spring.datasource.dynamic.datasource.master.password=root
spring.datasource.dynamic.datasource.master.url=jdbc:mysql://localhost:3306/test?characterEncoding=utf-8
spring.datasource.dynamic.datasource.master.driver-class-name=com.mysql.jdbc.Driver
#重写数据库连接池属性,为该数据源单独设置连接池属性，若不设置则默认为通用连接池配置
spring.datasource.dynamic.datasource.master.druid.initial-size=10

#MySQL2
spring.datasource.dynamic.datasource.mysql2.username=root
spring.datasource.dynamic.datasource.mysql2.password=root
spring.datasource.dynamic.datasource.mysql2.url=jdbc:mysql://localhost:3306/thinktank?characterEncoding=utf-8
spring.datasource.dynamic.datasource.mysql2.driver-class-name=com.mysql.jdbc.Driver
#重写数据库连接池属性,为该数据源单独设置连接池属性，若不设置则默认为通用连接池配置
spring.datasource.dynamic.datasource.mysql2.druid.initial-size=10


# 通用连接池配置
# 初始化时建立物理连接的个数，缺省：0
spring.datasource.dynamic.druid.initial-size=5
# 最大连接池数量，缺省：8
spring.datasource.dynamic.druid..max-active=20
# 最小连接池数量
spring.datasource.dynamic.druid.min-idle=5
# 配置获取连接时最大等待时间，单位毫秒。配置此项之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
spring.datasource.dynamic.druid.max-wait=6000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.dynamic.druid.time-between-eviction-runs-millis=300000
#spring.datasource.dynamic.druid.time-between-log-stats-millis
#spring.datasource.dynamic.druid.stat-sqlmax-size
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.dynamic.druid.min-evictable-idle-time-millis=60000
#spring.datasource.dynamic.druid.max-evictable-idle-time-millis=
# 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
spring.datasource.dynamic.druid.test-while-idle=true
# 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。缺省：true
spring.datasource.dynamic.druid.test-on-borrow=false
# 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
spring.datasource.dynamic.druid.test-on-return=false
# 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。
spring.datasource.dynamic.druid.validation-query=SELECT 1 FROM DUAL
# 单位：秒，检测连接是否有效的超时时间。底层调用jdbc Statement对象的void setQueryTimeout(int seconds)方法
#spring.datasource.dynamic.druid.validation-query-timeout=
#spring.datasource.dynamic.druid.use-global-datasource-stat=
#spring.datasource.dynamic.druid.async-init=
#spring.datasource.dynamic.druid.clear-filters-enable=
#spring.datasource.dynamic.druid.reset-stat-enable=
#spring.datasource.dynamic.druid.not-full-timeout-retry-count=
#spring.datasource.dynamic.druid.max-wait-thread-count=
#spring.datasource.dynamic.druid.fail-fast=
#spring.datasource.dynamic.druid.phyTimeout-millis=
#spring.datasource.dynamic.druid.keep-alive=
#spring.datasource.dynamic.druid.pool-prepared-statements=
#spring.datasource.dynamic.druid.init-variants=
#spring.datasource.dynamic.druid.init-global-variants=
#spring.datasource.dynamic.druid.use-unfair-lock=
#spring.datasource.dynamic.druid.kill-when-socket-read-timeout=
#spring.datasource.dynamic.druid.connection-properties=
# 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
# 缺省:-1
spring.datasource.dynamic.druid.max-pool-prepared-statement-per-connection-size=-1
#spring.datasource.dynamic.druid.init-connection-sqls=
#spring.datasource.dynamic.druid.share-prepared-statements=
#spring.datasource.dynamic.druid.connection-errorretry-attempts=
#spring.datasource.dynamic.druid.break-after-acquire-failure=
# 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
# 监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.dynamic.druid.filters=stat,wall,log4j







